{"version":3,"sources":["../../../src/components/box-shadow/InputShadow.jsx"],"names":["useRef","hooks","useCallback","useEffect","_crName","caption","toLowerCase","replace","INPUT_ROWS","min","max","step","unit","styleInput","width","map","item","name","_useChangeValue","fn","propName","value","bind","InputShadow","id","isShadow","isInset","initValue","onChange","_refInput","_changeInput","current","_enterColor","color","toHexString","_onChechInset","_onUnCheckInset","vLength","gLength","blurR","spreadR","opacity","_isNotShouldUpdate","nextProps"],"mappings":"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","sourcesContent":["import hooks from '../hooks'\r\nimport  memo  from '../memo'\r\n\r\nimport A from '../Comp'\r\n\r\nconst { useRef, useCallback, useEffect } = hooks\r\n\r\nconst _crName = ({ caption }) => caption\r\n .toLowerCase().replace(' ', '-');\r\n\r\nconst INPUT_ROWS = [\r\n  {\r\n    caption: \"Horizontal Length\",\r\n    min: -30, max: 30, step:1, unit: 'px'\r\n  },{\r\n    caption: \"Vertical Length\",\r\n    min: -30, max: 30, step:1, unit: 'px'\r\n  },{\r\n    caption: \"Blur Radius\",\r\n    min: 0, max: 20, step:1, unit: 'px'\r\n  },{\r\n    caption: \"Spread Radius\",\r\n    min: -10, max: 20, step:1, unit: 'px'\r\n  },{\r\n    styleInput: { width: 55 },\r\n    caption: \"Opacity\",\r\n    min: 0, max: 1, step: 0.01, unit: ''\r\n  }\r\n].map(item => ({\r\n  name: _crName(item),\r\n  ...item\r\n}));\r\n\r\nconst _useChangeValue = (fn, propName, value) => useCallback(\r\n  fn.bind(null, propName, value), []\r\n);\r\n\r\nconst InputShadow = ({\r\n  id,\r\n  isShadow,\r\n  isInset,\r\n  initValue,\r\n  onChange=()=>{}\r\n}) => {\r\n  const _refInput = useRef({})\r\n  , _changeInput = useCallback((propName, value) => {\r\n      _refInput.current[propName] = value\r\n      onChange(_refInput.current)\r\n    }, [])\r\n , _enterColor = useCallback((value, color) => {\r\n      _refInput.current.color = color.toHexString()\r\n      onChange(_refInput.current)\r\n   }, [])\r\n, _onChechInset = _useChangeValue(_changeInput, 'isInset', true)\r\n, _onUnCheckInset = _useChangeValue(_changeInput, 'isInset', false)\r\n\r\n\r\n   useEffect(() => {\r\n     _refInput.current = initValue\r\n   }, [id, isInset])\r\n\r\n  if (!isShadow) {return <div/>;}\r\n\r\n  const {\r\n    vLength, gLength,\r\n    blurR, spreadR,\r\n    opacity, color\r\n  } = initValue;\r\n  return (\r\n    <>\r\n      <A.RowInputType1\r\n         {...INPUT_ROWS[0]}\r\n          inputId={id}\r\n          initValue={vLength}\r\n          onChange={_changeInput.bind(null, 'vLength')}\r\n      />\r\n      <A.RowInputType1\r\n         {...INPUT_ROWS[1]}\r\n         inputId={id}\r\n         initValue={gLength}\r\n         onChange={_changeInput.bind(null, 'gLength')}\r\n      />\r\n      <A.RowInputType1\r\n         {...INPUT_ROWS[2]}\r\n         inputId={id}\r\n         initValue={blurR}\r\n         onChange={_changeInput.bind(null, 'blurR')}\r\n      />\r\n      <A.RowInputType1\r\n         {...INPUT_ROWS[3]}\r\n         inputId={id}\r\n         initValue={spreadR}\r\n         onChange={_changeInput.bind(null, 'spreadR')}\r\n      />\r\n      <A.RowInputType3\r\n         key={`${id}-sc`}\r\n         caption=\"Shadow Color\"\r\n         initValue={color}\r\n         onEnter={_enterColor}\r\n      />\r\n      <A.RowInputType1\r\n         {...INPUT_ROWS[4]}\r\n         inputId={id}\r\n         initValue={opacity}\r\n         onChange={_changeInput.bind(null, 'opacity')}\r\n      />\r\n      <A.RowCheckBox\r\n        caption=\"Inset\"\r\n        value={isInset}\r\n        onCheck={_onChechInset}\r\n        onUnCheck={_onUnCheckInset}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nconst _isNotShouldUpdate = ({\r\n isShadow, id, isInset\r\n}, nextProps\r\n) => {\r\n  return id === nextProps.id\r\n  && isInset === nextProps.isInset\r\n  && isShadow === nextProps.isShadow\r\n   ? true\r\n   : false;\r\n};\r\n\r\nexport default memo(InputShadow, _isNotShouldUpdate)\r\n"],"file":"InputShadow.js"}